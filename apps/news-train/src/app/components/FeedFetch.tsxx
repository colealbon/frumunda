// import React, { FunctionComponent, createContext, useContext, ReactNode } from 'react';
// import useSWR  from 'swr';
// import { CorsProxiesContext } from './CorsProxiesLoad'
// import { FeedContext } from './Feed';
// // eslint-disable-next-line @typescript-eslint/no-var-requires
// const { parse } = require('rss-to-json');

// export const ParsedFeedContentContext = createContext({});

// type Props = {children: ReactNode}
// const FeedContentFetch: FunctionComponent<Props> = ({children}: Props) => {

//   const feedContext = useContext(FeedContext)
//   const feed = `${feedContext}`
//   const corsProxiesContext = useContext(CorsProxiesContext)
//   const checkedCorsProxies = Object.entries(Object.assign(corsProxiesContext as object))
//     .filter(corsProxyEntry => Object.assign(corsProxyEntry[1] as object).checked === true)
//     .map((corsProxyEntry: [string, unknown]) => corsProxyEntry[0])
//     .filter(noblanks => !!noblanks);

//   const fetchFeedContent = (feedUrl: string, corsProxies: string[]): Promise<object> => {
//     return new Promise((resolve, reject) => {
//       const [corsProxy, ...rest] = corsProxies;
//       [corsProxy]
//         .flat()
//         .filter(corsProxyItem => {
//           return !!corsProxyItem;
//         })
//         .forEach(corsProxyItem => {
//           parse(`${corsProxyItem}${feedUrl}`)
//           .then((response: object) => {
//             if (!response) {
//               throw(new Error('fetchparse failed'))
//             }
//             resolve(response);
//             return;
//           })
//           .catch(() => {
//             console.log('badurl')
//             console.log(`${corsProxyItem}${feedUrl}`)
//             if (rest.length === 0) {
//               reject();
//             }
//             fetchFeedContent(feedUrl, rest);
//           });
//         });
//     });
//   };

//   const fetcher = () => {
//     return new Promise((resolve, reject) => {
//       fetchFeedContent(feed, checkedCorsProxies)
//       .then(parsedContent => {
//         resolve(parsedContent)
//       })
//       .catch(error => reject(error))
//     })
//   }

//   const { data } = useSWR(
//     `fetchedContent-${feed}`,
//     fetcher, 
//     {
//       suspense: true,
//       dedupingInterval: 600 * 1000,
//       revalidateOnFocus: false
//     }
//   )
  
//   const fetchedContent: unknown = Object.assign(data as object)

//   return (
//     <ParsedFeedContentContext.Provider value={fetchedContent as object}>
//       {children}
//     </ParsedFeedContentContext.Provider>
//   )
// };

// export default FeedContentFetch;
